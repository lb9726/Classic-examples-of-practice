线程是进程内的独立执行实体和调度单元，又称为“轻量级”进程，创建线程比进程快10～100倍。一个进程内所有的
线程共享相同的内存空间，全局变量等信息（这种机制有带来了同步问题），所以一个线程崩溃时，他会影响同一进程
中的其他线程。除了共享全局变量外，它们还共享以下信息：进程指令，大多数数据，打开的文件描述字，信号处理程序
和信号处置，当前工作目录，用户ID和组ID。
但每个线程有自己的私有信息：线程ID，寄存器集合（包括程序计数器和栈指针），栈（用于存放局部变量），error，信号掩码，优先级

5.3.2 线程基础函数
 pthread_create()函数用于创建新线程。当一个程序开始运行时，系统产生一个称为初级线程或主线程的单个线程，额外的线程需要由
 pthread_create()函数创建。
 #include <pthread.h>
 int pthread_create(pthread_t *tid, const pthread_attr_t *attr, void *(*func)(void *), void *arg);
 
 如果新线程创建成功，参数tid返回新生成的线程ID。一个进程中的每一个线程都由一个线程ID标识，其类型为pthread_t。
 attr指向线程属性的指针。每个线程有很多属性，包括优先级，起始栈大小，是否为守护进程等。通常将attr参数的值设为NULL，
 这时使用系统默认的属性。
 
 创建完一个新的线程后，需要说明它将执行的函数。函数的地址由参数func指定。该函数必须是一个静态函数，他只有一个通用指针作为参数，
 并返回一个通用指针。该执行函数的调用参数是有arg指定的，arg是一个通用指针，用于往func()函数中传递参数。如果需要传递多个参数时，
 必须将它们打包成一个结构，然后让arg指向该结构。线程以调用该执行函数开始。如果函数调用成功返回0,出错则返回非0.
 
 pthread_create() 函数的用法如下：
#include <pthread.h>
pthread_t tid;
int arg;
void *funtion(void *arg);   定义线程的执行函数
if (pthread_create(&tid, NULL, function, (void *)&arg)
{
    // handle exception
    exit(1);
}
……
生成新的线程，tid返回新线程ID，新线程执行function()函数，执行函数的参数为arg。


int pthread_join(pthread_t tid, void **status);
参数tid指定所等待的线程ID。该函数必须指定要等待的线程，不能等待任一个线程结束。要求等待的线程必须是当前的进程的成员，并且
不是分离的线程或守护线程。几个线程不能同时等待一个线程完成。如果其中一个成功调用pthread_join函数，则其他的县城将返回ESRCH
错误。如果等待的线程已经终止，则该函数立即返回。如果参数status指针非空，则指向终止线程的退出状态值。
该函数如果调用成功则返回0,出错时返回正的错误码。

线程分为两类：可联合和分离的，默认情况下线程都是可联合的。可联合的线程退出后，系统将释放其所有资源，其他线程调用pthread_join()
函数;而分离的线程退出后，系统将释放其所有资源，其他线程不能等待其终止。如果一个线程需要知道另一个线程什么时候终止，最好保留第二个
线程的可联合性。

pthread_detach()函数将指定的线程变成分离的。
pthread_detach()函数如下：
#include<pthread.h>
int pthread_detach(pthread_t tid);

参数tid指定要设置为分离的线程ID。
如果函数调用成功返回0，否则返回错误码。

没一个线程都有ID，pthread_self函数返回自己的线程ID。

pthread_self()函数如下：
#include<pthread.h>
pthread_t pthread_self(void);
函数返调用函数的线程ID。
线程可以通过如下语句将自己设为可分离的：

pthread_detach(pthread_self());
函数pthread_exit()用于终止当前线程，并返回状态值。如果当前线程是可联合的，则其推出状态将保留。
pthread_exit()函数如下：
#include <pthread.h>
void pthread_exit(void *status);
参数status指向函数的退出状态。这里的status不能指向一个局部变量，因为当前线程终止后其所有的局部变量将被撤销。
该函数没有返回值。

还有两种方法可以使得线程终止：
1.启动线程的函数pthread_create()的第3个参数返回。该返回值就是线程的终止状态
2.如果进程的main()函数返回或者任何线程调用exit()函数，进程将终止，线程将随之终止。



























