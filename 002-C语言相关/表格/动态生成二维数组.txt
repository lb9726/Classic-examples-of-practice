想要声明一个动态的二维数组可以根据声明一维数组的思路扩展。
比如想要声明一个动态的二维数组的时候，可是如下声明：
int array;//一个指向整形的指针，这就相当与动态数组的数组名，因为这个指针+1与数组下标+1的效果一样。 int a;//待输入的维度为a array=(int *)malloc(sizeof(int)a)

类似的，可是尝试声明一个二维的整形指针（当然类型是根据你要用的数组类型来定的）来达到动态的效果，示例如下：
int **array;
int a,b//待输入的两个维度值
array = ( int ** )malloc( size0f(int) * a );//首先确定二维数组的数组指针，即定义第一个维度
for( int i = 0; i < b; i++ )
{
array[i] = ( int * )malloc( sizeof(int) * b );//定义第二个维度
}
//至此就完成了一个二维数组的声明。

C/C++ code
　　//在堆中开辟一个4×5的二维int数组 
　　#include <stdio.h> #include <malloc.h> 
　　int **p; int i,j; 
　　void main() 
　　{ 
　　	p=(int **)malloc(4*sizeof(int *)); 
　　	if (NULL==p) 
　　		return; 
　　	for (i=0;i<4;i++) 
　　	{ 
　　		p[i]=(int *)malloc(5*sizeof(int));
　　 		if (NULL==p[i]) 
　　 			return; 
　　  } 
　　 for (i=0;i<4;i++) 
　　 { 
　　 		for (j=0;j<5;j++) 
　　 		{ 
　　 			p[i][j]=i*5+j; 
　　 		} 
　　 } 
　　 
　　 for (i=0;i<4;i++) 
　　 { 
　　 		for (j=0;j<5;j++)
　　      { 
　　  		printf(" %2d",p[i][j]); 
　　  	} 
　　  	printf("\n");
　　} 
　　for (i=0;i<4;i++) 
　　{ 
　　	free(p[i]);
　　} 
　　
　　free(p); 
　　} // 0 1 2 3 4 // 5 6 7 8 9 // 10 11 12 13 14 // 15 16 17 18 19 
　　
　　
　　如果不是动态生成的二维数组，那么可以这么理解。
不管是一维数组还是二维数组，都是一块连续的内存空间，计算机都是不会区分几行几列的，所谓的几行几列都是我们思维的模式。这里二维数组的好处就是能够一定程度上接近我们的思维模式，我们可以定义几行几列。我们把每一行想象成一个维度上的一个数组，每一小数组的地址想象成另一个维度上的数组就清楚了。例如，对于一个3*3的二维数组，其实也是一个大小为9的一维数组，只不过每3个数又可以组成一个小数组，我们可以通过每个小数组的地址快速找到我们需要的数（a[1][2]），也可以通过（int *p = a;p = p+1*3+2）来获得。
lz的a+i是在另一维度中的a+i，这个维度中的数组每一个都是一个小数组的地址，你+1就是取下一个小数组的地址，+i就是取下i个小数组的地址。

如果是动态生成的二维数组，那么每个小数组还是一样的连续空间，只不过另一个维度的数组内保存的就是这些小数组的地址，这些小数组是零散地分布在内存中，但是每个小数组还是保持连续的。
　　
　　
　　
/*
两种方法：
1.转化为一维数组申请
2.先申请全部行首指针，再按行逐行申请

1.
a=(int *)malloc(sizeof(int),(unsigned)m*n);
使用的时候就和一般的二维数组一样。
举个例子给你：
#include "stdlib.h" 
#include "stdio.h" 
#include <malloc.h> 

int main() 
{ 
int i,j; 
int n;//这个就是需要指定的行数
int (*p)[10]; 

scanf("%d",&n);//取得行数

//动态生成二维数组,指定列数为10，如果想改,自己该里面 
的参数,如果想定义n行2列就为: p=(int (*)[2])malloc(n*2*sizeof(int)); 
p=(int (*)[10])malloc(n*10*sizeof(int)); //动态申请n行10列的二维数组

for(i=0;i<n;i++) 
for(j=0;j<10;j++) 
p[i][j]=i*j; 

for(i=0;i<n;i++) 
{ 
for(j=0;j<10;j++) 
printf("%d,",p[i][j]); 

printf("\n"); 
} 
free(p); 

return 0; 
}

2.
这个也给你举个例子吧：
#include <stdio.h> 
#include <malloc.h> 
main() 
{ 
int i = 0; 
int j = 0; 
int line = 0; 
int row = 0; 
int **p = NULL; 

printf("input the line of the array:\n"); 
scanf("%d", &line); 
printf("input the row of the array:\n"); 
scanf("%d", &row); 

p = (int **)malloc(sizeof(int *) * line); 
if (NULL == p) 
{ 
return; 
} 
for (i = 0; i < line; i++) 
{ 
*(p + i) = (int *)malloc(sizeof(int) * row); 
if (NULL == *(p + i)) 
{ 
return; 
} 
} 
/*input data*/ 
for (i = 0; i < line; i++) 
{ 
for(j = 0; j < row; j++) 
{ 
p[i][j] = i + 1; 
} 
} 
/*output data*/ 
for (i = 0; i < line; i++) 
{ 
for(j = 0; j < row; j++) 
{ 
printf("%d", p[i][j]); 
} 
} 
/*free every line point*/ 
for (i = 0; i < line; i++) 
{ 
free(*(p + i)); 
p[i] = NULL; 
} 

free(p); 
p = NULL; 
}

第一种方法数组创建和释放都比较简单
*/
