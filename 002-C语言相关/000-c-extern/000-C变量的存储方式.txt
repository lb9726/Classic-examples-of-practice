动态存储方式和静态存储方式：
变量还有一个重要属性：即变量的存储方式。按变量值存在的时间(即生存期)角度来分，变量存储方式可以分为静态存储方式和动态存储方式。

所谓静态存储方式是指在程序运行期间分配固定的存储空间的方式。静态存储变量通常是在变量定义时就分配存储单元并一直保持不变，直至程序结束。全局变量全是这种存储方式。

而动态存储方式则是在程序运行期间根据需要进行动态分配存储存储空间的方式，使用完立即释放。典型的例子就是函数形式参数。
在c语言中每一个变量和函数有两个属性：数据类型和数据的存储类别。数据类型，例如：整形，字符型扽。 存储类别指的是数据在内存中的存储的方式。在c语言中，存储方式分为两大类：静态存储和动态存储类。具体包含4种：自动的（auto），静态的(static),寄存器的(register)，外部的(extern)。根据变量的存储类别，可以知道变量的作用域和生存周期。

1.自动变量
    这种存储类型是C语言程序中使用最广泛的。函数中的局部变量，如不专门声明为static存储类别，都是动态地分配存储空间的，数据存储在动态存储区中。函数中行参和在函数中定义的变量(包括在复合语句中定义的变量)，都属于此类，这类局部变量称为自动变量，自动变量用关键字auto作存储类别的声明。
    例如：
    int f(int a)
    {
        auto int b, c = 3;
    }// 定义f函数，a为形参， 定义b，c为自动变量
    a是形参，b，c是自动变量，对c赋初指3.执行完f函数后，自动释放a，b，c所占的存储单元。
    实际上，关键字auto可以省略。auto int b, c = 3 等价于int b, c = 3;
    自动变量作用与仅限于定义该变量的结构内。在函数中定义的自动变量只在该函数内有效。
    自动变量属于动态存储方式，只有定义它的函数被调用时才会给它分配存储单元，开始它的生存期。函数调用结束时，释放存储空间。
    由于自动变量的作用域和生存期都局限于定义它的结构内，因此，不同的结构中允许使用同名的自动变量而不会混淆。
    
    
2. 静态局部变量
    有时希望函数中局部变量的值在函数调用结束后能保留下来(即其占用的内存单元不释放)，在下一次调用该函数时使用。这时就应该指定该局部变量为静态局部变量，用关键字static进行声明。
    
    静态局部变量具有以下几个特点：
    1.静态局部变量在函数内定义，属于静态存储类别，在静态存储区分配存储单元。在程序整个运行期间都不释放。但它的作用域与自动变量相同，即只能在定义该变量的函数内使用该变量。
    2.对静态局部变量是在编译时赋初值的，即只赋值一次，在程序运行时它已有初值。以后每次调用函数时不再重新赋初值而只是保留上一次函数调用结束时的值。
    3.如在定义局部变量时不赋值的话，则对静态局部变量来说，编译时自动赋初始值0(对数值型变量)或(空字符变量)。而对自动变量不赋初值，其值是不确定的。
    4.虽然静态局部变量在函数调用结束后仍然存在，但是其他函数是不能引用它的，但如再次调用定义它的函数时，它又可以继续使用，而且保存了前次被调用后留下的值。
    但是应该看到的是，用静态存储要多占用内存(长期占用不释放，而不能向动态存储那样一个存储单元可供多个变量使用，节约内存),而且降低了程序的可读性。当调用次数多时往往弄不清静态局部变量的当前值是什么。因此，如不必要，不要多用静态局部变量。
    
    
3.存储器变量register
    前面介绍的变量都是内存变量，他们都是由编译程序在内存中分配单元。C语言还允许程序员使用CPU中的寄存器存放数据，需要用时直接从寄存器取出参数运算，不必再到内存中去存取。由于对寄存器的存取速度远高于对内存的存取速度，因此这样做可以提高执行效率。这种变量叫寄存器变量，用关键字register作声明。
    
    例如：
    int fact(int n)
    {
        regitster int i, f = 1; // 定义寄存器变量
        for (i = 0; i <= n; ++i)
        {
            f = f * i;
            return (f);
        }
    }   
    int main()
    {   
        int i;
        for (i = 1; i <= 5; ++i)
        {
            printf("%d! = %d\n", i, fac(i));
        }
    }
    
    定义局部变量f和i是寄存器变量，如果n的值大，则能节约许多执行时间。
    有关的几点说明
    1. 只有局部自动变量和形式参数可以作为寄存器变量，其他(如全局变量)不行。在调用一个函数时占用一些寄存器以存放寄存器变量的值，函数调用结束释放寄存器。此后，在调用另一个函数时又可以利用它来存放该寄存器变量。
    2. 一个计算机系统中的寄存器数目是有限的，故一次不能定义太多的寄存器变量。c语言中设定的个数以2个为宜。当CPU中的寄存器个数不够分配时，则把寄存器变量当成自动变量处理。
    3. 局部静态变量不能定义为寄存器变量。不能写成register static int a, b, c;
    不能把变量a, b, c既存放在静态存储区中，又存放在寄存器中，二者只能居其一。对一个变量只能声明为一种存储类别。
    
    
4.用extern声明外部变量
    外部变量(即全局变量)是在函数的外部定义的，它的作用域为从变量的定义处开始到本程序文件的结尾。 在此作用域内，全区变量可以为程序中各个函数所引用。编译时将外部变量分配在静态存储区。
    有时需要用extern来声明外部变量，以扩展外部变量的作用域。
    
    1. 在一个文件内声明外部变量
    如果外部变量不在文件的开头定义，其有效的作用范围只限于定义处到文件结束。
    如果在定义点之前的函数想要引用该外部变量，则应该在引用之前用关键字extern对该变量作“外部变量声明”。表示该变量是一个已经定义的外部变量。有了此声明，就可以从“声明”处起，合法地使用该外部变量了。
    例如：
    #include <stdio.h>
#include <stdlib.h>

int max(int x, int y)
{
    int z;
    z = x > y ? x : y;
    return (z);
}

int main()
{
    extern int A, B;
    printf("max = %d\n", max(A, B));
}

int A = 13, B = -8;

在本程序文件的最后一行定义外部变量A, B,但由于外部变量定义的位置在函数main之后，因此本来在mian函数中不能引用外部变量A，B。现在我们在main函数的第二行用extern对A和B进行"外部变量声明"，表示A和B是已经定义的外部变量(但定义的位置在后面)。这样，在main函数中就可以合法地使用全局变量A和B了。如果不做extern声明，编译时出错，系统不认为A，B是已经定义在外部的变量。一般做法是外部变量的定义放在引用它的所有函数之前，这样就可以避免在函数中多加上一个extern声明。
用extern声明外部变量时，类型名可以写也可以省略不写，例如extern int A; 也可以写成extern A；
    




