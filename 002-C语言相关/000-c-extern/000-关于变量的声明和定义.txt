关于变量的声明和定义
对变量而言，声明与定义的关系稍微复杂一些。在声明部分出现的变量有两种情况：一种是需要建立存储空间的(如 int a;）;另一种是不需要建立存储空间的(如extern a;) 前者称为“定义性声明"(defining declaration)，或称定义(definition)。后者称为"引用性声明"(referencing declaration)。广义地说，声明包括定义，但并非所有的声明都是定义。
对 int a; 而言，它既是声明也是定义。而对extern a，而言，它是声明，不是定义。一般为叙述方便，把建立存储空间的声明称为定义，而把不需要建立存储空间的声明称为声明。显然这里指的声明是狭义的，即非定义性声明。例如：
int main()
{
    extern A; // 是声明而不是定义，声明A是一个已经定义的外部变量
}
int A; // 是定义，定义A为整型外部变量

外部变量定义和外部变量声明的含义是不同的。外部变量的定义只能有一次，它的位置在所有函数之外，而同一个文件中的外部变量的声明可以是多次，它的位置可以在函数之内，也可以在函数之外，系统根据外部变量的定义(而不是外部变量的声明)分配存储单元。对外部变量是一个已经在后面定义过的外部变量，仅仅是为了提前引用该变量而作的声明。 extern只用作声明，而不用于定义。
用static来声明一个变量的作用有二： 1.对局部变量用static声明，则为该变量分配的空间在整个程序执行期间始终存在 2.对全局变量用static声明，则该变量的作用域只限于本文件模块(即声明的文件中)

请注意用auto，register，static声明变量时，是在定义变量的基础上加上这些关键字，而不能单独使用。
例如：
int a;
static a;

编译时会报重定义。

extern int a; 是声明不是定义
extern int a = 1; 是声明也是定义
extern a;是声明
int a;是定义
int a = 1;是定义


变量的声明有两种情况：

　　　　1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。

　　　　2、另一种是不需要建立存储空间的。 例如：extern int a 其中变量a是在别的文件中定义的。

　　　　声明是向编译器介绍名字－－标识符。它告诉编译器“这个函数或变量在某处可找到，它的模样象什么”。

　　　　而定义是说：“在这里建立变量”或“在这里建立函数”。它为名字分配存储空间。无论定义的是函数还是变量，编译器都要为它们在定义点分配存储空间。 对于变量，编译器确定变量的大小，然后在内存中开辟空间来保存其数据，对于函数，编译器会生成代码，这些代码最终也要占用一定的内存。

　　　　总之就是：把建立空间的声明成为“定义”，把不需要建立存储空间的成为“声明”。

　　　　基本类型变量的声明和定义（初始化）是同时产生的；而对于对象来说，声明和定义是分开的。

　　　　例如：类A

　　　　如果A a;就是一个声明，告诉编译器a是A类的一个对象变量，但是不进行初始化；

　　　　如果以后a=new A();这就是初始化，分配了空间。

　　　　（我们声明的最终目的是为了提前使用，即在定义之前使用，如果不需要提前使用就没有单独声明的必要，变量是如此，函数也是如此，所以声明不会分配存储空间，只有定义时才会分配存储空间。）

　　　　用static来声明一个变量的作用有二：

　　　　(1)对于局部变量用static声明，则是为该变量分配的空间在整个程序的执行期内都始终存在。

　　　　(2)外部变量用static来声明，则该变量的作用只限于本文件模块。


　　　　补充：

　　　　什么是定义？什么是声明？它们之间的区别是什么？

　　　　所谓定义就是（编译器）创建一个对象，为这个对象分配一块内存，并给它取上一个名字，这个名字就是就是我们经常所说的变量名或对象名。

　　　　声明有2重含义：

　　　　（1） 告诉编译器，这个名字已经匹配到一块内存上，下面的代码用到变量或者对象是在别的地方定义的。声明可以出现多次。

　　　　（2） 告诉编译器，这个名字已经被预定了，别的地方再也不能用它来作为变量名或对象名。

　　　　定义和声明的最重要区别就是：

　　　　定义创建对象并为这个对象分配了内存，声明没有分配内存。

https://www.cnblogs.com/tshua/p/5741009.html
