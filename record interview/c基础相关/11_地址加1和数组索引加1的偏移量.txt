请写出下列代码的输出内容
#include <stdio.h>
int main(){
	int a,b,c,d;
	a = 10;
	b = a++;
	c = ++a;
	d = 10*a++;
	printf("b,c,d:%d,%d,%d",b,c,d);
	return 0;
}
【标准答案】10,12,120
反映了前++,前--,后++,后--的区别 后++,后--，都是先赋值再++或--

unsigned char *p1;
unsigned long *p2;
p1 = (unsigned char *)0x801000;
p2 = (unsigned long *)0x810000;
请问p1+5= 0x801005; char类型的
	p2+5= 0x810020;
【标准答案】0x801005、0x810020
因为地址加法 p+n = p + n *(sizeof(type));

main()
{
	int a[5]={1,2,3,4,5};
	int *ptr=(int *)(&a+1);
	printf(“%d,%d”,*(a+1),*(ptr-1));
}
请问输出:
【标准答案】2,5



C语言中的指针加减偏移量
#include <stdio.h>  
int main()  
{  
    int a[5] = {1, 2, 3, 4, 5};  
    int* p = (int*)(&a + 1);    //此时的p指向了a[5]的下一个地址
    printf("%d, %d \n", *(a + 1), *(p - 1));  // 因为p是int类型的指针，p-1,只是减掉一个int的长度
    return 0;  
}

输出结果为：
2， 5
 
第一个结果好说，a+1后指针指向了数组中的‘2’。 而第二个为什么输出‘5’呢。 原理是c语言中的指针加减后，会根据指针的类型采用不同的偏移量。
比如， int* a；     int* b = a+1；  则 b - a = sizeof（int）
char* a； char* b = a+1; 则b - a = sizeof （char）  
 
将上述程序改写如下，更容易认识其本质

int main()  
{  
    int a[5] = {1, 2, 3, 4, 5};  
    int (*ptr)[5] = &a + 1;  
    //int* p = (int*)(&a + 1);  
    int* p = (int*)ptr;   
    printf("%d, %d /n", *(a + 1), *(p - 1));   
    return 0;  
}  


其中只是引入了一个中间变量 ptr指针， ptr指针的类型是 指向数组长度为5的指针， 所以 ptr + 1  其实是加了sizeof（a）的字节量，
ptr+1后指向了从a后面，即a开始数第6个字节。 
注意指向数组指针的写法。括号不能丢。
int a[n]， 则a是一个数组类型，而不是int型了，要注意正确对待。
a与&a的值一样，但意义不一样， a+1的偏移量为一个int，相当于&a[0]， &a+1的偏移量为真个数组。是数组类型的指针。









