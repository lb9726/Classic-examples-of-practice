问题
Observer 模式应该可以说是应用最多、影响最广的模式之一,因为 Observer 的一个实
例 Model/View/Control ( MVC)结构在系统开发架构设计中有着很重要的地位和意义,MVC
实现了业务逻辑和表示层的解耦。个人也认为 Observer 模式是软件开发过程中必须要掌握
和使用的模式之一。在 MFC 中,Doc/View(文档视图结构)提供了实现 MVC 的框架结构
(有一个从设计模式(Observer 模式)的角度分析分析 Doc/View 的文章正在进一步的撰写
当中,遗憾的是时间:)
)
。在 Java 阵容中,Struts 则提供和 MFC 中 Doc/View 结构类似的实
现 MVC 的框架。另外 Java 语言本身就提供了 Observer 模式的实现接口,这将在讨论中给
出。

当然,MVC 只是 Observer 模式的一个实例。Observer 模式要解决的问题为:建立一个
一(Subject)对多(Observer)的依赖关系,并且做到当“一”变化的时候,依赖这个“一”
的多也能够同步改变。最常见的一个例子就是:对同一组数据进行统计分析时候,我们希望
能够提供多种形式的表示(例如以表格进行统计显示、柱状图统计显示、百分比统计显示等)。
这些表示都依赖于同一组数据,我们当然需要当数据改变的时候,所有的统计的显示都能够
同时改变。Observer 模式就是解决了这一个问题。

模式选择
Observer 模式典型的结构图为:

这里的目标 Subject 提供依赖于它的观察者 Observer 的注册(Attach)和注销(Detach)
操作,并且提供了使得依赖于它的所有观察者同步的操作(Notify)。观察者 Observer 则提
供一个 Update 操作,注意这里的 Observer 的 Update 操作并不在 Observer 改变了 Subject 目
标状态的时候就对自己进行更新,这个更新操作要延迟到 Subject 对象发出 Notify 通知所有
Observer 进行修改(调用 Update)。




