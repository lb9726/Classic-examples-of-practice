问题
每个人、事物在不同的状态下会有不同表现(动作),而一个状态又会在不同的表现下
转移到下一个不同的状态(State)。最简单的一个生活中的例子就是:地铁入口处,如果你
放入正确的地铁票,门就会打开让你通过。在出口处也是验票,如果正确你就可以 ok,否
则就不让你通过(如果你动作野蛮,或许会有报警(Alarm),
:)
)。
有限状态自动机(FSM)也是一个典型的状态不同,对输入有不同的响应(状态转移)。
通常我们在实现这类系统会使用到很多的 Switch/Case 语句, Case 某种状态,发生什么动作,
Case 另外一种状态,则发生另外一种状态。但是这种实现方式至少有以下两个问题:
1)当状态数目不是很多的时候,Switch/Case 可能可以搞定。但是当状态数目很多的时
候(实际系统中也正是如此),维护一大组的 Switch/Case 语句将是一件异常困难并且容易出
错的事情。
2)状态逻辑和动作实现没有分离。在很多的系统实现中,动作的实现代码直接写在状
态的逻辑当中。这带来的后果就是系统的扩展性和维护得不到保证。

模式选择
State 模式就是被用来解决上面列出的两个问题的,在 State 模式中我们将状态逻辑和动
作实现进行分离。当一个操作中要维护大量的 case 分支语句,并且这些分支依赖于对象的
状态。State 模式将每一个分支都封装到独立的类中。State 模式典型的结构图为:




