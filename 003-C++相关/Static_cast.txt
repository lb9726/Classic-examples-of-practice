static_cast和const_cast有什么作用  

C++通过引进四个新的类型转换操作符克服了C风格类型转换的缺点，这四个操作符是, static_cast, const_cast, dynamic_cast, 和reinterpret_cast。在大多数情况下，对于这些操作符你只需要知道原来你习惯于这样写， 
(type) expression 
而现在你总应该这样写： 
static_cast<type>(expression) 
例如，假设你想把一个int转换成double，以便让包含int类型变量的表达式产生出浮点数值的结果。如果用C风格的类型转换，你能这样写： 
int firstNumber, secondNumber; 
... 
double result = ((double)firstNumber)/secondNumber； 
如果用上述新的类型转换方法，你应该这样写： 
double result = static_cast<double>(firstNumber)/secondNumber; 
这样的类型转换不论是对人工还是对程序都很容易识别。 
static_cast在功能上基本上与C风格的类型转换一样强大，含义也一样。它也有功能上限制。例如，你不能用static_cast象用C风格的类型转换一样把struct转换成int类型或者把double类型转换成指针类型，另外，static_cast不能从表达式中去除const属性，因为另一个新的类型转换操作符const_cast有这样的功能。 
其它新的C++类型转换操作符被用在需要更多限制的地方。const_cast用于类型转换掉表达式的const或volatileness属性。通过使用const_cast，你向人们和编译器强调你通过类型转换想做的只是改变一些东西的constness或者 volatileness属性。这个含义被编译器所约束。如果你试图使用const_cast来完成修改constness 或者volatileness属性之外的事情，你的类型转换将被拒绝。下面是一些例子： 
class Widget { ... }; 
class SpecialWidget: public Widget { ... }; 
void update(SpecialWidget *psw); 
SpecialWidget sw; // sw 是一个非const 对象。 
const SpecialWidget& csw = sw; // csw 是sw的一个引用 
// 它是一个const 对象 
update(&csw); // 错误!不能传递一个const SpecialWidget* 变量 
// 给一个处理SpecialWidget*类型变量的函数 
update(const_cast<SpecialWidget*>(&csw)); 
// 正确，csw的const被显示地转换掉（ 
// csw和sw两个变量值在update 
//函数中能被更新） 
update((SpecialWidget*)&csw); 
// 同上，但用了一个更难识别 
//的C风格的类型转换 
Widget *pw = new SpecialWidget; 
update(pw); // 错误！pw的类型是Widget*，但是 
// update函数处理的是SpecialWidget*类型 
update(const_cast<SpecialWidget*>(pw)); 
// 错误！const_cast仅能被用在影响 
// constness or volatileness的地方上。, 
// 不能用在向继承子类进行类型转换。 
到目前为止，const_cast最普通的用途就是转换掉对象的const属性。  

第二种特殊的类型转换符是dynamic_cast，它被用于安全地沿着类的继承关系向下进行类型转换。这就是说，你能用dynamic_cast把指向基类的指针或引用转换成指向其派生类或其兄弟类的指针或引用，而且你能知道转换是否成功。失败的转换将返回空指针（当对指针进行类型转换时）或者抛出异常（当对引用进行类型转换时）： 
Widget *pw; 
... 
update(dynamic_cast<SpecialWidget*>(pw)); 
// 正确，传递给update函数一个指针 
// 是指向变量类型为SpecialWidget的pw的指针 
// 如果pw确实指向一个对象, 
// 否则传递过去的将使空指针。 
void updateViaRef(SpecialWidget& rsw); 
updateViaRef(dynamic_cast<SpecialWidget&>(*pw)); 
//正确。 传递给updateViaRef函数 
// SpecialWidget pw 指针，如果pw 
// 确实指向了某个对象 
// 否则将抛出异常 
dynamic_casts在帮助你浏览继承层次上是有限制的。它不能被用于缺乏虚函数的类型上（参见条款M24），也不能用它来转换掉constness： 
int firstNumber, secondNumber; 
... 
double result = dynamic_cast<double>(firstNumber)/secondNumber; 
// 错误！没有继承关系 
const SpecialWidget sw; 
... 
update(dynamic_cast<SpecialWidget*>(&sw)); 
// 错误! dynamic_cast不能转换 
// 掉const。 
如你想在没有继承关系的类型中进行转换，你可能想到static_cast。如果是为了去除const，你总得用const_cast。   

这四个类型转换符中的最后一个是reinterpret_cast。使用这个操作符的类型转换，其的转换结果几乎都是执行期定义（implementation-defined）。因此，使用reinterpret_casts的代码很难移植。 
reinterpret_casts的最普通的用途就是在函数指针类型之间进行转换。例如，假设你有一个函数指针数组： 
typedef void (*FuncPtr)(); // FuncPtr is 一个指向函数 
// 的指针，该函数没有参数 
// 返回值类型为void 
FuncPtr funcPtrArray[10]; // funcPtrArray 是一个能容纳 
// 10个FuncPtrs指针的数组 
让我们假设你希望（因为某些莫名其妙的原因）把一个指向下面函数的指针存入funcPtrArray数组： 
int doSomething(); 
你不能不经过类型转换而直接去做，因为doSomething函数对于funcPtrArray数组来说有一个错误的类型。在FuncPtrArray数组里的函数返回值是void类型，而doSomething函数返回值是int类型。 
funcPtrArray[0] = &doSomething; // 错误！类型不匹配 
reinterpret_cast可以让你迫使编译器以你的方法去看待它们： 
funcPtrArray[0] = // this compiles 
reinterpret_cast<FuncPtr>(&doSomething); 
转换函数指针的代码是不可移植的（C++不保证所有的函数指针都被用一样的方法表示），在一些情况下这样的转换会产生不正确的结果（参见条款M31），所以你应该避免转换函数指针类型，除非你处于着背水一战和尖刀架喉的危急时刻。一把锋利的刀。一把非常锋利的刀。 
如果你使用的编译器缺乏对新的类型转换方式的支持，你可以用传统的类型转换方法代替static_cast, const_cast, 以及reinterpret_cast。也可以用下面的宏替换来模拟新的类型转换语法： 
#define static_cast(TYPE,EXPR) ((TYPE)(EXPR)) 
#define const_cast(TYPE,EXPR) ((TYPE)(EXPR)) 
#define reinterpret_cast(TYPE,EXPR) ((TYPE)(EXPR)) 
你可以象这样使用使用： 
double result = static_cast(double, firstNumber)/secondNumber; 
update(const_cast(SpecialWidget*, &sw)); 
funcPtrArray[0] = reinterpret_cast(FuncPtr, &doSomething); 
这些模拟不会象真实的操作符一样安全，但是当你的编译器可以支持新的的类型转换时，它们可以简化你把代码升级的过程。 
没有一个容易的方法来模拟dynamic_cast的操作，但是很多函数库提供了函数，安全地在派生类与基类之间进行类型转换。如果你没有这些函数而你有必须进行这样的类型转换，你也可以回到C风格的类型转换方法上，但是这样的话你将不能获知类型转换是否失败。当然，你也可以定义一个宏来模拟dynamic_cast的功能，就象模拟其它的类型转换一样： 
#define dynamic_cast(TYPE,EXPR) (TYPE)(EXPR) 
请记住，这个模拟并不能完全实现dynamic_cast的功能，它没有办法知道转换是否失败。 
我知道，是的，我知道，新的类型转换操作符不是很美观而且用键盘键入也很麻烦。如果你发现它们看上去实在令人讨厌，C风格的类型转换还可以继续使用并且合法。然而，正是因为新的类型转换符缺乏美感才能使它弥补了在含义精确性和可辨认性上的缺点。并且，使用新类型转换符的程序更容易被解析（不论是对人工还是对于工具程序），它们允许编译器检测出原来不能发现的错误。这些都是放弃C风格类型转换方法的强有力的理由。还有第三个理由：也许让类型转换符不美观和键入麻烦是一件好事。 



http://hi.baidu.com/syshall/blog/item/af837d1144a776fbc3ce79a3.html

使用标准C++的类型转换符：static_cast、dynamic_cast、reinterpret_cast、和const_cast。 
1 static_cast 
用法：static_cast < type-id > ( expression ) 
该运算符把expression转换为type-id类型，但没有运行时类型检查来保证转换的安全性。它主要有如下几种用法： 
①用于类层次结构中基类和子类之间指针或引用的转换。 
进行上行转换（把子类的指针或引用转换成基类表示）是安全的； 
进行下行转换（把基类指针或引用转换成子类表示）时，由于没有动态类型检查，所以是不安全的。 
②用于基本数据类型之间的转换，如把int转换成char，把int转换成enum。这种转换的安全性也要开发人员来保证。 
③把空指针转换成目标类型的空指针。 
④把任何类型的表达式转换成void类型。 
注意：static_cast不能转换掉expression的const、volitale、或者__unaligned属性。 
2 dynamic_cast 
用法：dynamic_cast < type-id > ( expression ) 
该运算符把expression转换成type-id类型的对象。Type-id必须是类的指针、类的引用或者void *； 
如果type-id是类指针类型，那么expression也必须是一个指针，如果type-id是一个引用，那么expression也必须是一个引用。 
dynamic_cast主要用于类层次间的上行转换和下行转换，还可以用于类之间的交叉转换。 
在类层次间进行上行转换时，dynamic_cast和static_cast的效果是一样的； 
在进行下行转换时，dynamic_cast具有类型检查的功能，比static_cast更安全。 
class B{ 
public: 
    int m_iNum; 
virtual void foo(); 
}; 
class D:public B{ 
public: 
    char *m_szName[100]; 
}; 
void func(B *pb){ 
    D *pd1 = static_cast<D *>(pb); 
    D *pd2 = dynamic_cast<D *>(pb); 
} 
在上面的代码段中，如果pb指向一个D类型的对象，pd1和pd2是一样的，并且对这两个指针执行D类型的任何操作都是安全的； 
但是，如果pb指向的是一个B类型的对象，那么pd1将是一个指向该对象的指针，对它进行D类型的操作将是不安全的（如访问m_szName）， 
而pd2将是一个空指针。 
另外要注意：B要有虚函数，否则会编译出错；static_cast则没有这个限制。 
这是由于运行时类型检查需要运行时类型信息，而这个信息存储在类的虚函数表（ 
关于虚函数表的概念，详细可见<Inside c++ object model>）中，只有定义了虚函数的类才有虚函数表， 
没有定义虚函数的类是没有虚函数表的。 
另外，dynamic_cast还支持交叉转换（cross cast）。如下代码所示。 
class A{ 
public: 
    int m_iNum; 
    virtual void f(){} 
    }; 
class B:public A{ 
}; 
class D:public A{ 
}; 
void foo(){ 
    B *pb = new B; 
    pb->m_iNum = 100; 
    D *pd1 = static_cast<D *>(pb); //compile error 
    D *pd2 = dynamic_cast<D *>(pb); //pd2 is NULL 
    delete pb; 
} 
在函数foo中，使用static_cast进行转换是不被允许的，将在编译时出错；而使用 dynamic_cast的转换则是允许的，结果是空指针。 
3 reinterpret_cast 
用法：reinterpret_cast<type-id> (expression) 
type-id必须是一个指针、引用、算术类型、函数指针或者成员指针。 
它可以把一个指针转换成一个整数，也可以把一个整数转换成一个指针（先把一个指针转换成一个整数， 
在把该整数转换成原类型的指针，还可以得到原先的指针值）。 
该运算符的用法比较多。 
(static_cast .与. reinterpret_cast比较，见下面 ) 
4 const_cast 
用法：const_cast<type_id> (expression) 
该运算符用来修改类型的const或volatile属性。除了const 或volatile修饰之外， type_id和expression的类型是一样的。 
常量指针被转化成非常量指针，并且仍然指向原来的对象； 
常量引用被转换成非常量引用，并且仍然指向原来的对象；常量对象被转换成非常量对象。 
Voiatile和const类试。举如下一例： 
class B{ 
public: 
    int m_iNum; 
} 
void foo(){ 
    const B b1; 
    b1.m_iNum = 100; //comile error 
    B b2 = const_cast<B>(b1); 
    b2. m_iNum = 200; //fine 
} 
上面的代码编译时会报错，因为b1是一个常量对象，不能对它进行改变； 
使用const_cast把它转换成一个常量对象，就可以对它的数据成员任意改变。注意：b1和b2是两个不同的对象。 
== =========================================== 
== dynamic_cast .vs. static_cast 
== =========================================== 
class B { ... }; 
class D : public B { ... }; 
void f(B* pb) 
{ 
	D* pd1 = dynamic_cast<D*>(pb); 
    D* pd2 = static_cast<D*>(pb); 
} 
If pb really points to an object of type D, then pd1 and pd2 will get the same value. They will also get the same value if pb == 0. 
If pb points to an object of type B and not to the complete D class, then dynamic_cast will know enough to return zero. However, static_cast relies on the programmer’s assertion that pb points to an object of type D and simply returns a pointer to that supposed D object. 
即dynamic_cast可用于继承体系中的向下转型，即将基类指针转换为派生类指针，比static_cast更严格更安全。 dynamic_cast在执行效率上比static_cast要差一些，但static_cast在更宽上范围内可以完成映射，这种不加限制的映射伴随 着不安全性。static_cast覆盖的变换类型除类层次的静态导航以外，还包括无映射变换、窄化变换(这种变换会导致对象切片,丢失信息)、用 VOID*的强制变换、隐式类型变换等... 
== =========================================== 
== static_cast .vs. reinterpret_cast 
== ================================================ 
reinterpret_cast是为了映射到一个完全不同类型的意思，这个关键词在我们需要把类型映射回原有类型时用到它。我们映射到的类型仅仅是为了故弄玄虚和其他目的，这是所有映射中最危险的。(这句话是C++编程思想中的原话) 
static_cast 和 reinterpret_cast 操作符修改了操作数类型。它们不是互逆的； static_cast 在编译时使用类型信息执行转换，在转换执行必要的检测(诸如指针越界计算, 类型检查). 其操作数相对是安全的。另一方面；reinterpret_cast 仅仅是重新解释了给出的对象的比特模型而没有进行二进制转换， 例子如下： 
int n=9; double d=static_cast < double > (n); 
上面的例子中, 我们将一个变量从 int 转换到 double。 这些类型的二进制表达式是不同的。 要将整数 9 转换到 双精度整数 9，static_cast 需要正确地为双精度整数 d 补足比特位。其结果为 9.0。而reinterpret_cast 的行为却不同: 
int n=9; 
double d=reinterpret_cast<double & > (n); 
这次, 结果有所不同. 在进行计算以后, d 包含无用值. 这是因为 reinterpret_cast 仅仅是复制 n 的比特位到 d, 没有进行必要的分析. 
因此, 你需要谨慎使用 reinterpret_cast.
