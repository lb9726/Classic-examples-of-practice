在重载操作符时以下所列的事情不能做：
1. 不能增加新的操作符号。只能对语言中已经有的操作符重新定义其含义。
2. 有些操作符不能重载。如 . (对象中成月访问), ::(作用域解析操作符),sizeof，?:(三元操作符)等等
3. 不能改变操作符的元数（arity)。元数是指操作符有关的参数和操作数(operand)个数。一元操作符(如：!)只能应用于一个操作符。
二元操作符(如：+ - × /)只能作用于两个操作数。另外只有一个三元操作符 (?:) 在重载[](数组中的括号，数组索引操作符)时，这个限制
可能带来麻烦。
4.不能改变操作符的优先级或关联性。这条规则确定了语句中操作符采用何种顺序计算。同样地，在大多数程序中这个约束不会带来问题，
因为修改计算顺序一般没有什么好处。

5. 不能重新定义内置类型的操作符。可以重载的操作符必须是类中的一个方法，或者至少一个全局重载操作符函数的某个参数必须是一个
用户定义类型(如一个类)。这说明不能做一些奇怪的事情。如重新定义int的+的操作符，让他完成减法操作，不过对于自己的类，定义这样一个
完成减法的+操作符是可以的。这条规则有一个例外，就是内存分配和撤销例程。可以替换程序中所有内存分配的全局例程。

有些操作符本身就有两个不同的含义。例如：-操作符不仅可以用作一个二元操作符（如x = y - z),也可以用作为一个一元操作符。（如x -= y)。
* 操作符可以用作乘法操作符，也可以用对一个指针解除引用。 << 既是插入操作符，也是左移操作符，这要取决于上下文。也可以对操作符重载，
使之有两重含义。

方法或者全局函数
    首先，必须确定你的操作符到底要作为你的类的一个方法，还是要作为一个全局函数(通常是这个类的一个友元)。
    你该如何选择呢？首先，需要理解这两个选择之间的差别。如果操作符是类的一个方法，该操作符相应的表达式的左边必须是
    此类的一个对象。如果编写一个全局函数，左边则可以是另一种不同类型的对象。
    
存在三种不同类型的操作符：
    1.必须是方法的操作符。c++语言要求某些操作符必须是类的方法，因为在类之外这些操作符没有意义。例如：operator= 与类就紧密绑定,
    因此不会在别处存在。表16-1 列出了必须是方法的操作符。对于这些操作符，要选择作为一个方法还是作为全局函数就简单了，不过，大多数
    操作符都没有这个要求。
    2.必须是全局函数的操作符。如果需要让操作符左边的操作数是另一种类型和变量(不同于类),就必须让该操作符作为一个全局函数。这条规则
    特别适用于operator<<和operator>>，其左边操作数是一个iostream 对象，而不是类的对象。另外，满足交换律的操作符(如二元操作符+和-)
    3.既可以是方法又可以是全局函数的操作符。在C++群体中，对于编写方法还是编写全局函数来重载操作符，其中哪一种做法更好，存在着一些
    分歧。不过，我们建议以下原则：让每一个操作符都作为一个方法，除非根据前面的要求必须作为全局函数才有例外。这个原则的一个主要优点
    在于，方法可以是虚方法(virtual)，但友元函数则不能是虚的。因此，计划在一个继承树中编写重载操作符时，应当尽可能地将其实现为方法。
    将重载操作符编写为方法时，如果它不会改变对象，则应当将整个方法标记为const。这样一来，就可以在const对象上操作此操作符了。
    
    
选择参数类型
    在选择参数类型时往往存在某些限制，因为你不能改变参数的个数(不过也有例外，本章后面将解释这个问题)。例如，Operator++ 
    作为一个全局函数时总是有两个参数;如果它是一个方法，则有一个参数。如果与此标准不符，编译器就会发出一个错误。从这个意义
    上来说，操作符函数与常规的函数有所区别，因为可以用不同个数的参数重载常规函数。另外，尽管可以为任何类型编写操作符，但
    操作符的参数类型仅限于当前类(就是要为这个类编写操作符)。如果想为类T实现加法，就不能写一个取两个string的operator+。
    如果确定究竟是按值取参数还是按引用取参数，以及是否该置其为const，这就需要选择了。
    选择按值还是按引用很容易，每个参数都应当按引用传递。如第9章和第12章所述，如果可以按引用就不要按值传递对象。
    
    要不要const，这个决定也很简单：置每个参数都为const，除非确实要修改此参数。表16-1 列出了每个操作数的示例原型，并适当
    地提供了标以const并作为引用传递参数。
    
    
不应该重载的操作符
    有一些操作符要是重载可不是好主意，尽管这些操作符确实允许重载。具体地，重载取地址操作符(operator&)就没什么特别用处，
    而且如果这样做还会导致混淆，因为可能会以意料之外的方式改变c++语言为此操作符提供的基本行为(去变量地址)
    另外，应当避免重载二元布尔操作符 operator&& 和 operator|| ，因为你不能保证c++的短路计算原则。
    最后一点，不应对逗号操作符(operatro,)重载。是的，你没有看错，C++确实有一个逗号操作符。这也称为序列操作符(sequencing operaor),
    用于分隔统一语句中的两个表达式，并保证这两个表达式按从左到右的顺序计算。重载这个操作符很少有(甚至根本没有)合适的理由。
    
    
    
    
    
