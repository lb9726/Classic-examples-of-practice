浅谈类对象和类指针
代码：

    Student a;  
    s.setName("A");
    
    //Studeng *b = new Student();
    Student *b;
    b = new Student();
    b->setName("B");

分析：

定义类对象基本格式是：Student a；在定义之后就已经为a这个对象分配了内存，且为内存栈；

定义类指针基本格式是：Student *b = new Student()；在定义*b的时候并没有分配内存，只有执行new后才会分配内存，且为内存堆。

 

问题：

（1）类对象和类指针区别

A:  定义

——类对象：利用类的构造函数（构造函数：对类进行初始化工作）在内存中分配一块区域（包括一些成员变量赋值）；

——类指针：是一个内存地址值，指向内存中存放的类对象（包括一些成员变量赋值；类指针可以指向多个不同的对象，这就是多态）；

B:  使用

——引用成员：对象使用“.”操作符，指针用“->”操作符；

——生命周期：若是成员变量，则由类的析构函数来释放空间；若是函数中临时变量，则作用域是函数体内；而指针则需要利用delete在相应的地方释放分配的内存块。

注意：new与delete成对存在！！！

C:  存储位置

——类对象：用的是内存栈,是个局部的临时变量；
——类指针：用的是内存堆，是个永久变量,除非你释放它。

D:   多态

——指针可以实现多态，直接用对象不行。

F:  访问方式

——指针变量是间接访问，但可实现多态（通过父类指针可调用子类对象），并且没有调用构造函数；
——直接声明可直接访问，但不能实现多态，声明即调用了构造函数（已分配了内存）。

 

（2）类对象和类指针联系

——在类的声明尚未完成的情况下，可以声明指向该类的指针，但是不可声明该类的对象；
——父类的指针可以指向子类的对象。

 

（3）指针与多态

——有前面可知：类指针是一个指向内存中存放类对象的内存地址值，那么这个指针可以指向多个不同的对象，这就是多态；

拓展：指针与虚函数
——要发挥虚函数的强大作用，必须使用指针来访问对象。

——当类是有虚函数的基类，Func是它的一个虚函数,则调用Func时：
        类对象：调用的是它自己的Func；
        类指针：调用的是分配给它空间时那种类的Func。

 

（4）什么情况使用类对象与类指针？

 

——其实作用基本一样 都是为了调用类的成员变量和成员函数用的；
——当你希望明确使用这个类的时候，最好使用对象；

        如果你希望使用C++中的动态绑定，则最好使用指针或者引用，指针和引用用起来更灵活，容易实现多态等。

 

（5）指针好处
——第一，实现多态。
——第二，在函数调用，传指针参数。不管你的对象或结构参数多么庞大，你用指针，传过去的就是4个字节。如果用对象，参数   传递占用的资源就太大了。
